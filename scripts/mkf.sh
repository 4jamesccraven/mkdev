#!/usr/bin/env bash

# Created by argbash-init v2.10.0
# ARG_POSITIONAL_SINGLE([action],[The Action mkdev should take. Valid options (evoke|list|delete)],[list])
# ARG_DEFAULTS_POS([])
# ARG_HELP([Search mkdev recipes])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_action="list"
# THE DEFAULTS INITIALIZATION - OPTIONALS


print_help()
{
	printf '%s\n' "Search mkdev recipes"
	printf 'Usage: %s [-h|--help] [<action>]\n' "mkf"
	printf '\t%s\n' "<action>: The Action mkdev should take. Valid options (evoke|list|delete) (default: 'list')"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect between 0 and 1, but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_action "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


# vvv  PLACE YOUR CODE HERE  vvv

subcommand="$_arg_action"

case "$subcommand" in
    evoke|build|conjure|summon|list|show|delete)
        ;;
    *)
        echo "Invalid subcommand '$subcommand'. Valid options: [evoke|build|delete]"
        exit 1
        ;;
esac

dependencies=("mk" "fzf" "bat")
for prog in "${dependencies[@]}"; do
    if ! command -v "$prog" &> /dev/null; then
        echo "${prog} is necessary to use this script. Install it first."
        exit 1
    fi
done

selection=$(mk list --type plain \
    | fzf --layout reverse-list --height=40% --border=rounded \
    --preview 'mk list {} | bat --style=numbers --color=always')

if [[ -z "$selection" ]]; then
    echo "Nothing selected."
    exit 0
fi

mk "$subcommand" "$selection"

# ^^^  TERMINATE YOUR CODE BEFORE THE BOTTOM ARGBASH MARKER  ^^^

# ] <-- needed because of Argbash
