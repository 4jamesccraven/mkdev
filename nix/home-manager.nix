{ mkdev }:
{
  pkgs,
  config,
  lib,
  ...
}:

let
  inherit (lib)
    mkOption
    mkEnableOption
    types
    literalExpression
    ;
  cfg = config.programs.mkdev;
  toml = pkgs.formats.toml { };
in
{
  options.programs.mkdev = {
    enable = mkEnableOption "Enable mkdev";

    package = mkOption {
      description = "The package for mkdev";
      type = types.package;
      default = mkdev;
    };

    extraPackages = mkOption {
      type = types.listOf types.package;
      default = [ ];
      description = ''
        Additional scripts to install, e.g., mkf
      '';
    };

    config = mkOption {
      description = "The contents of the mkdev configuration file.";
      type = toml.type;
      default = { };
      example = literalExpression ''
        {
          recipe_dir = "/home/user/.config/mkdev/my_recipes";

          subs = {
            day = "date +%d";
            dir = "mk::dir";
            month = "date +%m";
            user = "whoami";
            year = "date +%Y";
          };
        };
      '';
    };

    recipes = mkOption {
      description = "Recipes that are generated by mkdev.";
      type = types.listOf types.attrs;
      default = [ ];
      example = literalExpression ''
        [
          {
            name = "hello";
            description = "A file that says hello.";
            languages = [ "Text" ];
            contents = [
              {
                name = "hello.txt";
                content = "hello world!";
              }
            ];
          }
        ]
      '';
    };
  };

  config = lib.mkIf cfg.enable {
    assertions = lib.mkIf (cfg.recipes != [ ]) [
      {
        assertion = cfg.config ? recipe_dir;
        message = "programs.mkdev.config.recipe_dir must be set when recipes are declared.";
      }
      {
        assertion = lib.hasPrefix "${config.home.homeDirectory}/" cfg.config.recipe_dir;
        message = "programs.mkdev.config.recipe_dir must be inside the home directory.";
      }
    ];

    home.packages = [ cfg.package ] ++ cfg.extraPackages;
    xdg.configFile."mkdev/config.toml" = lib.mkIf (cfg.config != { }) {
      source = toml.generate "config.toml" cfg.config;
    };

    home.file = lib.mkIf (cfg.recipes != [ ]) (
      builtins.listToAttrs (
        map (
          recipe:
          let
            home = config.home.homeDirectory;
            user_dir = cfg.config.recipe_dir;
            recipe_dir = builtins.replaceStrings [ "${home}/" ] [ "" ] user_dir;
          in
          {
            name = "${recipe_dir}/${recipe.name}.toml";
            value = {
              source = toml.generate "${recipe.name}.toml" recipe;
            };
          }
        ) cfg.recipes
      )
    );
  };
}
